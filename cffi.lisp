(uiop/package:define-package :grpc/cffi (:nicknames) (:use :cl) (:shadow)
                             (:import-from :cffi) (:export) (:intern))
(in-package :grpc/cffi)
;;don't edit above

(eval-when (:load-toplevel)
  (define-foreign-library libgrpc
    (t (:default "libgrpc")))

  (unless (foreign-library-loaded-p 'libgrpc)
    (use-foreign-library libgrpc)))

;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcenum #.(swig-lispify "grpc_status_code" 'enumname)
	(#.(swig-lispify "GRPC_STATUS_OK" 'enumvalue :keyword) #.0)
	(#.(swig-lispify "GRPC_STATUS_CANCELLED" 'enumvalue :keyword) #.1)
	(#.(swig-lispify "GRPC_STATUS_UNKNOWN" 'enumvalue :keyword) #.2)
	(#.(swig-lispify "GRPC_STATUS_INVALID_ARGUMENT" 'enumvalue :keyword) #.3)
	(#.(swig-lispify "GRPC_STATUS_DEADLINE_EXCEEDED" 'enumvalue :keyword) #.4)
	(#.(swig-lispify "GRPC_STATUS_NOT_FOUND" 'enumvalue :keyword) #.5)
	(#.(swig-lispify "GRPC_STATUS_ALREADY_EXISTS" 'enumvalue :keyword) #.6)
	(#.(swig-lispify "GRPC_STATUS_PERMISSION_DENIED" 'enumvalue :keyword) #.7)
	(#.(swig-lispify "GRPC_STATUS_UNAUTHENTICATED" 'enumvalue :keyword) #.16)
	(#.(swig-lispify "GRPC_STATUS_RESOURCE_EXHAUSTED" 'enumvalue :keyword) #.8)
	(#.(swig-lispify "GRPC_STATUS_FAILED_PRECONDITION" 'enumvalue :keyword) #.9)
	(#.(swig-lispify "GRPC_STATUS_ABORTED" 'enumvalue :keyword) #.10)
	(#.(swig-lispify "GRPC_STATUS_OUT_OF_RANGE" 'enumvalue :keyword) #.11)
	(#.(swig-lispify "GRPC_STATUS_UNIMPLEMENTED" 'enumvalue :keyword) #.12)
	(#.(swig-lispify "GRPC_STATUS_INTERNAL" 'enumvalue :keyword) #.13)
	(#.(swig-lispify "GRPC_STATUS_UNAVAILABLE" 'enumvalue :keyword) #.14)
	(#.(swig-lispify "GRPC_STATUS_DATA_LOSS" 'enumvalue :keyword) #.15)
	(#.(swig-lispify "GRPC_STATUS__DO_NOT_USE" 'enumvalue :keyword) #.-1))

(cl:export '#.(swig-lispify "grpc_status_code" 'enumname))

(cffi:defcenum #.(swig-lispify "grpc_compression_algorithm" 'enumname)
	(#.(swig-lispify "GRPC_COMPRESS_NONE" 'enumvalue :keyword) #.0)
	#.(swig-lispify "GRPC_COMPRESS_DEFLATE" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_COMPRESS_GZIP" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_COMPRESS_STREAM_GZIP" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_COMPRESS_ALGORITHMS_COUNT" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "grpc_compression_algorithm" 'enumname))

(cffi:defcenum #.(swig-lispify "grpc_compression_level" 'enumname)
	(#.(swig-lispify "GRPC_COMPRESS_LEVEL_NONE" 'enumvalue :keyword) #.0)
	#.(swig-lispify "GRPC_COMPRESS_LEVEL_LOW" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_COMPRESS_LEVEL_MED" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_COMPRESS_LEVEL_HIGH" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_COMPRESS_LEVEL_COUNT" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "grpc_compression_level" 'enumname))

(cffi:defcenum #.(swig-lispify "gpr_clock_type" 'enumname)
	(#.(swig-lispify "GPR_CLOCK_MONOTONIC" 'enumvalue :keyword) #.0)
	#.(swig-lispify "GPR_CLOCK_REALTIME" 'enumvalue :keyword)
	#.(swig-lispify "GPR_CLOCK_PRECISE" 'enumvalue :keyword)
	#.(swig-lispify "GPR_TIMESPAN" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "gpr_clock_type" 'enumname))

(cffi:defcenum #.(swig-lispify "grpc_byte_buffer_type" 'enumname)
	#.(swig-lispify "GRPC_BB_RAW" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "grpc_byte_buffer_type" 'enumname))

(cffi:defcenum #.(swig-lispify "grpc_arg_type" 'enumname)
	#.(swig-lispify "GRPC_ARG_STRING" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_ARG_INTEGER" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_ARG_POINTER" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "grpc_arg_type" 'enumname))

(cffi:defcenum #.(swig-lispify "grpc_call_error" 'enumname)
	(#.(swig-lispify "GRPC_CALL_OK" 'enumvalue :keyword) #.0)
	#.(swig-lispify "GRPC_CALL_ERROR" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_NOT_ON_SERVER" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_NOT_ON_CLIENT" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_ALREADY_ACCEPTED" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_ALREADY_INVOKED" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_NOT_INVOKED" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_ALREADY_FINISHED" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_TOO_MANY_OPERATIONS" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_INVALID_FLAGS" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_INVALID_METADATA" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_INVALID_MESSAGE" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_NOT_SERVER_COMPLETION_QUEUE" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_BATCH_TOO_BIG" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_PAYLOAD_TYPE_MISMATCH" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CALL_ERROR_COMPLETION_QUEUE_SHUTDOWN" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "grpc_call_error" 'enumname))

(cffi:defcenum #.(swig-lispify "grpc_completion_type" 'enumname)
	#.(swig-lispify "GRPC_QUEUE_SHUTDOWN" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_QUEUE_TIMEOUT" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_OP_COMPLETE" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "grpc_completion_type" 'enumname))

(cffi:defcenum #.(swig-lispify "grpc_op_type" 'enumname)
	(#.(swig-lispify "GRPC_OP_SEND_INITIAL_METADATA" 'enumvalue :keyword) #.0)
	#.(swig-lispify "GRPC_OP_SEND_MESSAGE" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_OP_SEND_CLOSE_FROM_CLIENT" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_OP_SEND_STATUS_FROM_SERVER" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_OP_RECV_INITIAL_METADATA" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_OP_RECV_MESSAGE" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_OP_RECV_STATUS_ON_CLIENT" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_OP_RECV_CLOSE_ON_SERVER" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "grpc_op_type" 'enumname))

(cffi:defcenum #.(swig-lispify "grpc_cq_polling_type" 'enumname)
	#.(swig-lispify "GRPC_CQ_DEFAULT_POLLING" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CQ_NON_LISTENING" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CQ_NON_POLLING" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "grpc_cq_polling_type" 'enumname))

(cffi:defcenum #.(swig-lispify "grpc_cq_completion_type" 'enumname)
	#.(swig-lispify "GRPC_CQ_NEXT" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CQ_PLUCK" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CQ_CALLBACK" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "grpc_cq_completion_type" 'enumname))

(defanonenum 
	#.(swig-lispify "PTHREAD_CREATE_JOINABLE" 'enumvalue)
	#.(swig-lispify "PTHREAD_CREATE_DETACHED" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_CREATE_JOINABLE" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_CREATE_DETACHED" 'enumvalue))

(defanonenum 
	#.(swig-lispify "PTHREAD_MUTEX_TIMED_NP" 'enumvalue)
	#.(swig-lispify "PTHREAD_MUTEX_RECURSIVE_NP" 'enumvalue)
	#.(swig-lispify "PTHREAD_MUTEX_ERRORCHECK_NP" 'enumvalue)
	#.(swig-lispify "PTHREAD_MUTEX_ADAPTIVE_NP" 'enumvalue)
	(#.(swig-lispify "PTHREAD_MUTEX_NORMAL" 'enumvalue) 1)
	(#.(swig-lispify "PTHREAD_MUTEX_RECURSIVE" 'enumvalue) 1)
	(#.(swig-lispify "PTHREAD_MUTEX_ERRORCHECK" 'enumvalue) 2)
	(#.(swig-lispify "PTHREAD_MUTEX_DEFAULT" 'enumvalue) 1)
	(#.(swig-lispify "PTHREAD_MUTEX_FAST_NP" 'enumvalue) 0))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_TIMED_NP" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_RECURSIVE_NP" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_ERRORCHECK_NP" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_ADAPTIVE_NP" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_NORMAL" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_RECURSIVE" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_ERRORCHECK" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_DEFAULT" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_FAST_NP" 'enumvalue))

(defanonenum 
	#.(swig-lispify "PTHREAD_MUTEX_STALLED" 'enumvalue)
	(#.(swig-lispify "PTHREAD_MUTEX_STALLED_NP" 'enumvalue) 0)
	#.(swig-lispify "PTHREAD_MUTEX_ROBUST" 'enumvalue)
	(#.(swig-lispify "PTHREAD_MUTEX_ROBUST_NP" 'enumvalue) 1))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_STALLED" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_STALLED_NP" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_ROBUST" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_MUTEX_ROBUST_NP" 'enumvalue))

(defanonenum 
	#.(swig-lispify "PTHREAD_PRIO_NONE" 'enumvalue)
	#.(swig-lispify "PTHREAD_PRIO_INHERIT" 'enumvalue)
	#.(swig-lispify "PTHREAD_PRIO_PROTECT" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_PRIO_NONE" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_PRIO_INHERIT" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_PRIO_PROTECT" 'enumvalue))

(defanonenum 
	#.(swig-lispify "PTHREAD_RWLOCK_PREFER_READER_NP" 'enumvalue)
	#.(swig-lispify "PTHREAD_RWLOCK_PREFER_WRITER_NP" 'enumvalue)
	#.(swig-lispify "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP" 'enumvalue)
	(#.(swig-lispify "PTHREAD_RWLOCK_DEFAULT_NP" 'enumvalue) 0))

(cl:export '#.(swig-lispify "PTHREAD_RWLOCK_PREFER_READER_NP" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_RWLOCK_PREFER_WRITER_NP" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_RWLOCK_DEFAULT_NP" 'enumvalue))

(defanonenum 
	#.(swig-lispify "PTHREAD_INHERIT_SCHED" 'enumvalue)
	#.(swig-lispify "PTHREAD_EXPLICIT_SCHED" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_INHERIT_SCHED" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_EXPLICIT_SCHED" 'enumvalue))

(defanonenum 
	#.(swig-lispify "PTHREAD_SCOPE_SYSTEM" 'enumvalue)
	#.(swig-lispify "PTHREAD_SCOPE_PROCESS" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_SCOPE_SYSTEM" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_SCOPE_PROCESS" 'enumvalue))

(defanonenum 
	#.(swig-lispify "PTHREAD_PROCESS_PRIVATE" 'enumvalue)
	#.(swig-lispify "PTHREAD_PROCESS_SHARED" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_PROCESS_PRIVATE" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_PROCESS_SHARED" 'enumvalue))

(defanonenum 
	#.(swig-lispify "PTHREAD_CANCEL_ENABLE" 'enumvalue)
	#.(swig-lispify "PTHREAD_CANCEL_DISABLE" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_CANCEL_ENABLE" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_CANCEL_DISABLE" 'enumvalue))

(defanonenum 
	#.(swig-lispify "PTHREAD_CANCEL_DEFERRED" 'enumvalue)
	#.(swig-lispify "PTHREAD_CANCEL_ASYNCHRONOUS" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_CANCEL_DEFERRED" 'enumvalue))

(cl:export '#.(swig-lispify "PTHREAD_CANCEL_ASYNCHRONOUS" 'enumvalue))

(cffi:defcenum #.(swig-lispify "grpc_slice_ref_whom" 'enumname)
	(#.(swig-lispify "GRPC_SLICE_REF_TAIL" 'enumvalue :keyword) #.1)
	(#.(swig-lispify "GRPC_SLICE_REF_HEAD" 'enumvalue :keyword) #.2)
	(#.(swig-lispify "GRPC_SLICE_REF_BOTH" 'enumvalue :keyword) #.(cl:+ 1 2)))

(cl:export '#.(swig-lispify "grpc_slice_ref_whom" 'enumname))

(cffi:defcenum #.(swig-lispify "grpc_connectivity_state" 'enumname)
	#.(swig-lispify "GRPC_CHANNEL_IDLE" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CHANNEL_CONNECTING" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CHANNEL_READY" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CHANNEL_TRANSIENT_FAILURE" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_CHANNEL_SHUTDOWN" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "grpc_connectivity_state" 'enumname))

(cffi:defcfun ("grpc_metadata_array_init" #.(swig-lispify "grpc_metadata_array_init" 'function)) :void
  (array :pointer))

(cl:export '#.(swig-lispify "grpc_metadata_array_init" 'function))

(cffi:defcfun ("grpc_metadata_array_destroy" #.(swig-lispify "grpc_metadata_array_destroy" 'function)) :void
  (array :pointer))

(cl:export '#.(swig-lispify "grpc_metadata_array_destroy" 'function))

(cffi:defcfun ("grpc_call_details_init" #.(swig-lispify "grpc_call_details_init" 'function)) :void
  (details :pointer))

(cl:export '#.(swig-lispify "grpc_call_details_init" 'function))

(cffi:defcfun ("grpc_call_details_destroy" #.(swig-lispify "grpc_call_details_destroy" 'function)) :void
  (details :pointer))

(cl:export '#.(swig-lispify "grpc_call_details_destroy" 'function))

(cffi:defcfun ("grpc_register_plugin" #.(swig-lispify "grpc_register_plugin" 'function)) :void
  (init :pointer)
  (destroy :pointer))

(cl:export '#.(swig-lispify "grpc_register_plugin" 'function))

(cffi:defcfun ("grpc_init" #.(swig-lispify "grpc_init" 'function)) :void)

(cl:export '#.(swig-lispify "grpc_init" 'function))

(cffi:defcfun ("grpc_shutdown" #.(swig-lispify "grpc_shutdown" 'function)) :void)

(cl:export '#.(swig-lispify "grpc_shutdown" 'function))

(cffi:defcfun ("grpc_is_initialized" #.(swig-lispify "grpc_is_initialized" 'function)) :int)

(cl:export '#.(swig-lispify "grpc_is_initialized" 'function))

(cffi:defcfun ("grpc_version_string" #.(swig-lispify "grpc_version_string" 'function)) :string)

(cl:export '#.(swig-lispify "grpc_version_string" 'function))

(cffi:defcfun ("grpc_g_stands_for" #.(swig-lispify "grpc_g_stands_for" 'function)) :string)

(cl:export '#.(swig-lispify "grpc_g_stands_for" 'function))

(cffi:defcfun ("grpc_completion_queue_factory_lookup" #.(swig-lispify "grpc_completion_queue_factory_lookup" 'function)) :pointer
  (attributes :pointer))

(cl:export '#.(swig-lispify "grpc_completion_queue_factory_lookup" 'function))

(cffi:defcfun ("grpc_completion_queue_create_for_next" #.(swig-lispify "grpc_completion_queue_create_for_next" 'function)) :pointer
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_completion_queue_create_for_next" 'function))

(cffi:defcfun ("grpc_completion_queue_create_for_pluck" #.(swig-lispify "grpc_completion_queue_create_for_pluck" 'function)) :pointer
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_completion_queue_create_for_pluck" 'function))

(cffi:defcfun ("grpc_completion_queue_create_for_callback" #.(swig-lispify "grpc_completion_queue_create_for_callback" 'function)) :pointer
  (shutdown_callback :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_completion_queue_create_for_callback" 'function))

(cffi:defcfun ("grpc_completion_queue_create" #.(swig-lispify "grpc_completion_queue_create" 'function)) :pointer
  (factory :pointer)
  (attributes :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_completion_queue_create" 'function))

(cffi:defcfun ("grpc_completion_queue_next" #.(swig-lispify "grpc_completion_queue_next" 'function)) :pointer
  (cq :pointer)
  (deadline :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_completion_queue_next" 'function))

(cffi:defcfun ("grpc_completion_queue_pluck" #.(swig-lispify "grpc_completion_queue_pluck" 'function)) :pointer
  (cq :pointer)
  (tag :pointer)
  (deadline :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_completion_queue_pluck" 'function))

(cl:defconstant #.(swig-lispify "GRPC_MAX_COMPLETION_QUEUE_PLUCKERS" 'constant) 6)

(cl:export '#.(swig-lispify "GRPC_MAX_COMPLETION_QUEUE_PLUCKERS" 'constant))

(cffi:defcfun ("grpc_completion_queue_shutdown" #.(swig-lispify "grpc_completion_queue_shutdown" 'function)) :void
  (cq :pointer))

(cl:export '#.(swig-lispify "grpc_completion_queue_shutdown" 'function))

(cffi:defcfun ("grpc_completion_queue_destroy" #.(swig-lispify "grpc_completion_queue_destroy" 'function)) :void
  (cq :pointer))

(cl:export '#.(swig-lispify "grpc_completion_queue_destroy" 'function))

(cffi:defcfun ("grpc_completion_queue_thread_local_cache_init" #.(swig-lispify "grpc_completion_queue_thread_local_cache_init" 'function)) :void
  (cq :pointer))

(cl:export '#.(swig-lispify "grpc_completion_queue_thread_local_cache_init" 'function))

(cffi:defcfun ("grpc_completion_queue_thread_local_cache_flush" #.(swig-lispify "grpc_completion_queue_thread_local_cache_flush" 'function)) :int
  (cq :pointer)
  (tag :pointer)
  (ok :pointer))

(cl:export '#.(swig-lispify "grpc_completion_queue_thread_local_cache_flush" 'function))

(cffi:defcfun ("grpc_channel_check_connectivity_state" #.(swig-lispify "grpc_channel_check_connectivity_state" 'function)) #.(swig-lispify "grpc_connectivity_state" 'enumname)
  (channel :pointer)
  (try_to_connect :int))

(cl:export '#.(swig-lispify "grpc_channel_check_connectivity_state" 'function))

(cffi:defcfun ("grpc_channel_num_external_connectivity_watchers" #.(swig-lispify "grpc_channel_num_external_connectivity_watchers" 'function)) :int
  (channel :pointer))

(cl:export '#.(swig-lispify "grpc_channel_num_external_connectivity_watchers" 'function))

(cffi:defcfun ("grpc_channel_watch_connectivity_state" #.(swig-lispify "grpc_channel_watch_connectivity_state" 'function)) :void
  (channel :pointer)
  (last_observed_state #.(swig-lispify "grpc_connectivity_state" 'enumname))
  (deadline :pointer)
  (cq :pointer)
  (tag :pointer))

(cl:export '#.(swig-lispify "grpc_channel_watch_connectivity_state" 'function))

(cffi:defcfun ("grpc_channel_support_connectivity_watcher" #.(swig-lispify "grpc_channel_support_connectivity_watcher" 'function)) :int
  (channel :pointer))

(cl:export '#.(swig-lispify "grpc_channel_support_connectivity_watcher" 'function))

(cffi:defcfun ("grpc_channel_create_call" #.(swig-lispify "grpc_channel_create_call" 'function)) :pointer
  (channel :pointer)
  (parent_call :pointer)
  (propagation_mask :unsigned-int)
  (completion_queue :pointer)
  (method :pointer)
  (host :pointer)
  (deadline :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_channel_create_call" 'function))

(cffi:defcfun ("grpc_channel_ping" #.(swig-lispify "grpc_channel_ping" 'function)) :void
  (channel :pointer)
  (cq :pointer)
  (tag :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_channel_ping" 'function))

(cffi:defcfun ("grpc_channel_register_call" #.(swig-lispify "grpc_channel_register_call" 'function)) :pointer
  (channel :pointer)
  (method :string)
  (host :string)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_channel_register_call" 'function))

(cffi:defcfun ("grpc_channel_create_registered_call" #.(swig-lispify "grpc_channel_create_registered_call" 'function)) :pointer
  (channel :pointer)
  (parent_call :pointer)
  (propagation_mask :unsigned-int)
  (completion_queue :pointer)
  (registered_call_handle :pointer)
  (deadline :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_channel_create_registered_call" 'function))

(cffi:defcfun ("grpc_call_arena_alloc" #.(swig-lispify "grpc_call_arena_alloc" 'function)) :pointer
  (call :pointer)
  (size :int))

(cl:export '#.(swig-lispify "grpc_call_arena_alloc" 'function))

(cffi:defcfun ("grpc_call_start_batch" #.(swig-lispify "grpc_call_start_batch" 'function)) #.(swig-lispify "grpc_call_error" 'enumname)
  (call :pointer)
  (ops :pointer)
  (nops :int)
  (tag :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_call_start_batch" 'function))

(cffi:defcfun ("grpc_call_get_peer" #.(swig-lispify "grpc_call_get_peer" 'function)) :string
  (call :pointer))

(cl:export '#.(swig-lispify "grpc_call_get_peer" 'function))

(cffi:defcfun ("grpc_census_call_set_context" #.(swig-lispify "grpc_census_call_set_context" 'function)) :void
  (call :pointer)
  (context :pointer))

(cl:export '#.(swig-lispify "grpc_census_call_set_context" 'function))

(cffi:defcfun ("grpc_census_call_get_context" #.(swig-lispify "grpc_census_call_get_context" 'function)) :pointer
  (call :pointer))

(cl:export '#.(swig-lispify "grpc_census_call_get_context" 'function))

(cffi:defcfun ("grpc_channel_get_target" #.(swig-lispify "grpc_channel_get_target" 'function)) :string
  (channel :pointer))

(cl:export '#.(swig-lispify "grpc_channel_get_target" 'function))

(cffi:defcfun ("grpc_channel_get_info" #.(swig-lispify "grpc_channel_get_info" 'function)) :void
  (channel :pointer)
  (channel_info :pointer))

(cl:export '#.(swig-lispify "grpc_channel_get_info" 'function))

(cffi:defcfun ("grpc_channel_reset_connect_backoff" #.(swig-lispify "grpc_channel_reset_connect_backoff" 'function)) :void
  (channel :pointer))

(cl:export '#.(swig-lispify "grpc_channel_reset_connect_backoff" 'function))

(cffi:defcfun ("grpc_insecure_channel_create" #.(swig-lispify "grpc_insecure_channel_create" 'function)) :pointer
  (target :string)
  (args :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_insecure_channel_create" 'function))

(cffi:defcfun ("grpc_lame_client_channel_create" #.(swig-lispify "grpc_lame_client_channel_create" 'function)) :pointer
  (target :string)
  (error_code #.(swig-lispify "grpc_status_code" 'enumname))
  (error_message :string))

(cl:export '#.(swig-lispify "grpc_lame_client_channel_create" 'function))

(cffi:defcfun ("grpc_channel_destroy" #.(swig-lispify "grpc_channel_destroy" 'function)) :void
  (channel :pointer))

(cl:export '#.(swig-lispify "grpc_channel_destroy" 'function))

(cffi:defcfun ("grpc_call_cancel" #.(swig-lispify "grpc_call_cancel" 'function)) #.(swig-lispify "grpc_call_error" 'enumname)
  (call :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_call_cancel" 'function))

(cffi:defcfun ("grpc_call_cancel_with_status" #.(swig-lispify "grpc_call_cancel_with_status" 'function)) #.(swig-lispify "grpc_call_error" 'enumname)
  (call :pointer)
  (status #.(swig-lispify "grpc_status_code" 'enumname))
  (description :string)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_call_cancel_with_status" 'function))

(cffi:defcfun ("grpc_call_ref" #.(swig-lispify "grpc_call_ref" 'function)) :void
  (call :pointer))

(cl:export '#.(swig-lispify "grpc_call_ref" 'function))

(cffi:defcfun ("grpc_call_unref" #.(swig-lispify "grpc_call_unref" 'function)) :void
  (call :pointer))

(cl:export '#.(swig-lispify "grpc_call_unref" 'function))

(cffi:defcfun ("grpc_server_request_call" #.(swig-lispify "grpc_server_request_call" 'function)) #.(swig-lispify "grpc_call_error" 'enumname)
  (server :pointer)
  (call :pointer)
  (details :pointer)
  (request_metadata :pointer)
  (cq_bound_to_call :pointer)
  (cq_for_notification :pointer)
  (tag_new :pointer))

(cl:export '#.(swig-lispify "grpc_server_request_call" 'function))

(cffi:defcenum #.(swig-lispify "grpc_server_register_method_payload_handling" 'enumname)
	#.(swig-lispify "GRPC_SRM_PAYLOAD_NONE" 'enumvalue :keyword)
	#.(swig-lispify "GRPC_SRM_PAYLOAD_READ_INITIAL_BYTE_BUFFER" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "grpc_server_register_method_payload_handling" 'enumname))

(cffi:defcfun ("grpc_server_register_method" #.(swig-lispify "grpc_server_register_method" 'function)) :pointer
  (server :pointer)
  (method :string)
  (host :string)
  (payload_handling #.(swig-lispify "grpc_server_register_method_payload_handling" 'enumname))
  (flags :unsigned-int))

(cl:export '#.(swig-lispify "grpc_server_register_method" 'function))

(cffi:defcfun ("grpc_server_request_registered_call" #.(swig-lispify "grpc_server_request_registered_call" 'function)) #.(swig-lispify "grpc_call_error" 'enumname)
  (server :pointer)
  (registered_method :pointer)
  (call :pointer)
  (deadline :pointer)
  (request_metadata :pointer)
  (optional_payload :pointer)
  (cq_bound_to_call :pointer)
  (cq_for_notification :pointer)
  (tag_new :pointer))

(cl:export '#.(swig-lispify "grpc_server_request_registered_call" 'function))

(cffi:defcfun ("grpc_server_create" #.(swig-lispify "grpc_server_create" 'function)) :pointer
  (args :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_server_create" 'function))

(cffi:defcfun ("grpc_server_register_completion_queue" #.(swig-lispify "grpc_server_register_completion_queue" 'function)) :void
  (server :pointer)
  (cq :pointer)
  (reserved :pointer))

(cl:export '#.(swig-lispify "grpc_server_register_completion_queue" 'function))

(cffi:defcfun ("grpc_server_add_insecure_http2_port" #.(swig-lispify "grpc_server_add_insecure_http2_port" 'function)) :int
  (server :pointer)
  (addr :string))

(cl:export '#.(swig-lispify "grpc_server_add_insecure_http2_port" 'function))

(cffi:defcfun ("grpc_server_start" #.(swig-lispify "grpc_server_start" 'function)) :void
  (server :pointer))

(cl:export '#.(swig-lispify "grpc_server_start" 'function))

(cffi:defcfun ("grpc_server_shutdown_and_notify" #.(swig-lispify "grpc_server_shutdown_and_notify" 'function)) :void
  (server :pointer)
  (cq :pointer)
  (tag :pointer))

(cl:export '#.(swig-lispify "grpc_server_shutdown_and_notify" 'function))

(cffi:defcfun ("grpc_server_cancel_all_calls" #.(swig-lispify "grpc_server_cancel_all_calls" 'function)) :void
  (server :pointer))

(cl:export '#.(swig-lispify "grpc_server_cancel_all_calls" 'function))

(cffi:defcfun ("grpc_server_destroy" #.(swig-lispify "grpc_server_destroy" 'function)) :void
  (server :pointer))

(cl:export '#.(swig-lispify "grpc_server_destroy" 'function))

(cffi:defcfun ("grpc_tracer_set_enabled" #.(swig-lispify "grpc_tracer_set_enabled" 'function)) :int
  (name :string)
  (enabled :int))

(cl:export '#.(swig-lispify "grpc_tracer_set_enabled" 'function))

(cffi:defcfun ("grpc_header_key_is_legal" #.(swig-lispify "grpc_header_key_is_legal" 'function)) :int
  (slice :pointer))

(cl:export '#.(swig-lispify "grpc_header_key_is_legal" 'function))

(cffi:defcfun ("grpc_header_nonbin_value_is_legal" #.(swig-lispify "grpc_header_nonbin_value_is_legal" 'function)) :int
  (slice :pointer))

(cl:export '#.(swig-lispify "grpc_header_nonbin_value_is_legal" 'function))

(cffi:defcfun ("grpc_is_binary_header" #.(swig-lispify "grpc_is_binary_header" 'function)) :int
  (slice :pointer))

(cl:export '#.(swig-lispify "grpc_is_binary_header" 'function))

(cffi:defcfun ("grpc_call_error_to_string" #.(swig-lispify "grpc_call_error_to_string" 'function)) :string
  (error #.(swig-lispify "grpc_call_error" 'enumname)))

(cl:export '#.(swig-lispify "grpc_call_error_to_string" 'function))

(cffi:defcfun ("grpc_resource_quota_create" #.(swig-lispify "grpc_resource_quota_create" 'function)) :pointer
  (trace_name :string))

(cl:export '#.(swig-lispify "grpc_resource_quota_create" 'function))

(cffi:defcfun ("grpc_resource_quota_ref" #.(swig-lispify "grpc_resource_quota_ref" 'function)) :void
  (resource_quota :pointer))

(cl:export '#.(swig-lispify "grpc_resource_quota_ref" 'function))

(cffi:defcfun ("grpc_resource_quota_unref" #.(swig-lispify "grpc_resource_quota_unref" 'function)) :void
  (resource_quota :pointer))

(cl:export '#.(swig-lispify "grpc_resource_quota_unref" 'function))

(cffi:defcfun ("grpc_resource_quota_resize" #.(swig-lispify "grpc_resource_quota_resize" 'function)) :void
  (resource_quota :pointer)
  (new_size :int))

(cl:export '#.(swig-lispify "grpc_resource_quota_resize" 'function))

(cffi:defcfun ("grpc_resource_quota_set_max_threads" #.(swig-lispify "grpc_resource_quota_set_max_threads" 'function)) :void
  (resource_quota :pointer)
  (new_max_threads :int))

(cl:export '#.(swig-lispify "grpc_resource_quota_set_max_threads" 'function))

(cffi:defcfun ("grpc_resource_quota_arg_vtable" #.(swig-lispify "grpc_resource_quota_arg_vtable" 'function)) :pointer)

(cl:export '#.(swig-lispify "grpc_resource_quota_arg_vtable" 'function))

(cffi:defcfun ("grpc_channelz_get_top_channels" #.(swig-lispify "grpc_channelz_get_top_channels" 'function)) :string
  (start_channel_id :long))

(cl:export '#.(swig-lispify "grpc_channelz_get_top_channels" 'function))

(cffi:defcfun ("grpc_channelz_get_servers" #.(swig-lispify "grpc_channelz_get_servers" 'function)) :string
  (start_server_id :long))

(cl:export '#.(swig-lispify "grpc_channelz_get_servers" 'function))

(cffi:defcfun ("grpc_channelz_get_channel" #.(swig-lispify "grpc_channelz_get_channel" 'function)) :string
  (channel_id :long))

(cl:export '#.(swig-lispify "grpc_channelz_get_channel" 'function))

(cffi:defcfun ("grpc_channelz_get_subchannel" #.(swig-lispify "grpc_channelz_get_subchannel" 'function)) :string
  (subchannel_id :long))

(cl:export '#.(swig-lispify "grpc_channelz_get_subchannel" 'function))

(cffi:defcfun ("grpc_channelz_get_socket" #.(swig-lispify "grpc_channelz_get_socket" 'function)) :string
  (socket_id :long))

(cl:export '#.(swig-lispify "grpc_channelz_get_socket" 'function))


